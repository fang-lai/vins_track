// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: database.proto

#ifndef PROTOBUF_INCLUDED_database_2eproto
#define PROTOBUF_INCLUDED_database_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_database_2eproto 

namespace protobuf_database_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_database_2eproto
class DescriptorsProto;
class DescriptorsProtoDefaultTypeInternal;
extern DescriptorsProtoDefaultTypeInternal _DescriptorsProto_default_instance_;
class FrameProto;
class FrameProtoDefaultTypeInternal;
extern FrameProtoDefaultTypeInternal _FrameProto_default_instance_;
class ImageNormPointProto;
class ImageNormPointProtoDefaultTypeInternal;
extern ImageNormPointProtoDefaultTypeInternal _ImageNormPointProto_default_instance_;
class ImagePointProto;
class ImagePointProtoDefaultTypeInternal;
extern ImagePointProtoDefaultTypeInternal _ImagePointProto_default_instance_;
class MapPointProto;
class MapPointProtoDefaultTypeInternal;
extern MapPointProtoDefaultTypeInternal _MapPointProto_default_instance_;
class MapProto;
class MapProtoDefaultTypeInternal;
extern MapProtoDefaultTypeInternal _MapProto_default_instance_;
class PoseProto;
class PoseProtoDefaultTypeInternal;
extern PoseProtoDefaultTypeInternal _PoseProto_default_instance_;
namespace google {
namespace protobuf {
template<> ::DescriptorsProto* Arena::CreateMaybeMessage<::DescriptorsProto>(Arena*);
template<> ::FrameProto* Arena::CreateMaybeMessage<::FrameProto>(Arena*);
template<> ::ImageNormPointProto* Arena::CreateMaybeMessage<::ImageNormPointProto>(Arena*);
template<> ::ImagePointProto* Arena::CreateMaybeMessage<::ImagePointProto>(Arena*);
template<> ::MapPointProto* Arena::CreateMaybeMessage<::MapPointProto>(Arena*);
template<> ::MapProto* Arena::CreateMaybeMessage<::MapProto>(Arena*);
template<> ::PoseProto* Arena::CreateMaybeMessage<::PoseProto>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class ImagePointProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ImagePointProto) */ {
 public:
  ImagePointProto();
  virtual ~ImagePointProto();

  ImagePointProto(const ImagePointProto& from);

  inline ImagePointProto& operator=(const ImagePointProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImagePointProto(ImagePointProto&& from) noexcept
    : ImagePointProto() {
    *this = ::std::move(from);
  }

  inline ImagePointProto& operator=(ImagePointProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImagePointProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImagePointProto* internal_default_instance() {
    return reinterpret_cast<const ImagePointProto*>(
               &_ImagePointProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ImagePointProto* other);
  friend void swap(ImagePointProto& a, ImagePointProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImagePointProto* New() const final {
    return CreateMaybeMessage<ImagePointProto>(NULL);
  }

  ImagePointProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ImagePointProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ImagePointProto& from);
  void MergeFrom(const ImagePointProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImagePointProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float u = 1;
  void clear_u();
  static const int kUFieldNumber = 1;
  float u() const;
  void set_u(float value);

  // float v = 2;
  void clear_v();
  static const int kVFieldNumber = 2;
  float v() const;
  void set_v(float value);

  // @@protoc_insertion_point(class_scope:ImagePointProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float u_;
  float v_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_database_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImageNormPointProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ImageNormPointProto) */ {
 public:
  ImageNormPointProto();
  virtual ~ImageNormPointProto();

  ImageNormPointProto(const ImageNormPointProto& from);

  inline ImageNormPointProto& operator=(const ImageNormPointProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageNormPointProto(ImageNormPointProto&& from) noexcept
    : ImageNormPointProto() {
    *this = ::std::move(from);
  }

  inline ImageNormPointProto& operator=(ImageNormPointProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageNormPointProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageNormPointProto* internal_default_instance() {
    return reinterpret_cast<const ImageNormPointProto*>(
               &_ImageNormPointProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ImageNormPointProto* other);
  friend void swap(ImageNormPointProto& a, ImageNormPointProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageNormPointProto* New() const final {
    return CreateMaybeMessage<ImageNormPointProto>(NULL);
  }

  ImageNormPointProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ImageNormPointProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ImageNormPointProto& from);
  void MergeFrom(const ImageNormPointProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageNormPointProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float u = 1;
  void clear_u();
  static const int kUFieldNumber = 1;
  float u() const;
  void set_u(float value);

  // float v = 2;
  void clear_v();
  static const int kVFieldNumber = 2;
  float v() const;
  void set_v(float value);

  // @@protoc_insertion_point(class_scope:ImageNormPointProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float u_;
  float v_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_database_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MapPointProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MapPointProto) */ {
 public:
  MapPointProto();
  virtual ~MapPointProto();

  MapPointProto(const MapPointProto& from);

  inline MapPointProto& operator=(const MapPointProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MapPointProto(MapPointProto&& from) noexcept
    : MapPointProto() {
    *this = ::std::move(from);
  }

  inline MapPointProto& operator=(MapPointProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MapPointProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapPointProto* internal_default_instance() {
    return reinterpret_cast<const MapPointProto*>(
               &_MapPointProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(MapPointProto* other);
  friend void swap(MapPointProto& a, MapPointProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapPointProto* New() const final {
    return CreateMaybeMessage<MapPointProto>(NULL);
  }

  MapPointProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MapPointProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MapPointProto& from);
  void MergeFrom(const MapPointProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapPointProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:MapPointProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_database_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PoseProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PoseProto) */ {
 public:
  PoseProto();
  virtual ~PoseProto();

  PoseProto(const PoseProto& from);

  inline PoseProto& operator=(const PoseProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PoseProto(PoseProto&& from) noexcept
    : PoseProto() {
    *this = ::std::move(from);
  }

  inline PoseProto& operator=(PoseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PoseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoseProto* internal_default_instance() {
    return reinterpret_cast<const PoseProto*>(
               &_PoseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PoseProto* other);
  friend void swap(PoseProto& a, PoseProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PoseProto* New() const final {
    return CreateMaybeMessage<PoseProto>(NULL);
  }

  PoseProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PoseProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PoseProto& from);
  void MergeFrom(const PoseProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // float q_x = 4;
  void clear_q_x();
  static const int kQXFieldNumber = 4;
  float q_x() const;
  void set_q_x(float value);

  // float q_y = 5;
  void clear_q_y();
  static const int kQYFieldNumber = 5;
  float q_y() const;
  void set_q_y(float value);

  // float q_z = 6;
  void clear_q_z();
  static const int kQZFieldNumber = 6;
  float q_z() const;
  void set_q_z(float value);

  // float q_w = 7;
  void clear_q_w();
  static const int kQWFieldNumber = 7;
  float q_w() const;
  void set_q_w(float value);

  // @@protoc_insertion_point(class_scope:PoseProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  float q_x_;
  float q_y_;
  float q_z_;
  float q_w_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_database_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DescriptorsProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DescriptorsProto) */ {
 public:
  DescriptorsProto();
  virtual ~DescriptorsProto();

  DescriptorsProto(const DescriptorsProto& from);

  inline DescriptorsProto& operator=(const DescriptorsProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DescriptorsProto(DescriptorsProto&& from) noexcept
    : DescriptorsProto() {
    *this = ::std::move(from);
  }

  inline DescriptorsProto& operator=(DescriptorsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DescriptorsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DescriptorsProto* internal_default_instance() {
    return reinterpret_cast<const DescriptorsProto*>(
               &_DescriptorsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DescriptorsProto* other);
  friend void swap(DescriptorsProto& a, DescriptorsProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DescriptorsProto* New() const final {
    return CreateMaybeMessage<DescriptorsProto>(NULL);
  }

  DescriptorsProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DescriptorsProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DescriptorsProto& from);
  void MergeFrom(const DescriptorsProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescriptorsProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string bitset = 1;
  void clear_bitset();
  static const int kBitsetFieldNumber = 1;
  const ::std::string& bitset() const;
  void set_bitset(const ::std::string& value);
  #if LANG_CXX11
  void set_bitset(::std::string&& value);
  #endif
  void set_bitset(const char* value);
  void set_bitset(const char* value, size_t size);
  ::std::string* mutable_bitset();
  ::std::string* release_bitset();
  void set_allocated_bitset(::std::string* bitset);

  // @@protoc_insertion_point(class_scope:DescriptorsProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bitset_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_database_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FrameProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FrameProto) */ {
 public:
  FrameProto();
  virtual ~FrameProto();

  FrameProto(const FrameProto& from);

  inline FrameProto& operator=(const FrameProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FrameProto(FrameProto&& from) noexcept
    : FrameProto() {
    *this = ::std::move(from);
  }

  inline FrameProto& operator=(FrameProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameProto* internal_default_instance() {
    return reinterpret_cast<const FrameProto*>(
               &_FrameProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(FrameProto* other);
  friend void swap(FrameProto& a, FrameProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FrameProto* New() const final {
    return CreateMaybeMessage<FrameProto>(NULL);
  }

  FrameProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FrameProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FrameProto& from);
  void MergeFrom(const FrameProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ImagePointProto image_points = 1;
  int image_points_size() const;
  void clear_image_points();
  static const int kImagePointsFieldNumber = 1;
  ::ImagePointProto* mutable_image_points(int index);
  ::google::protobuf::RepeatedPtrField< ::ImagePointProto >*
      mutable_image_points();
  const ::ImagePointProto& image_points(int index) const;
  ::ImagePointProto* add_image_points();
  const ::google::protobuf::RepeatedPtrField< ::ImagePointProto >&
      image_points() const;

  // repeated .ImageNormPointProto image_norm_points = 2;
  int image_norm_points_size() const;
  void clear_image_norm_points();
  static const int kImageNormPointsFieldNumber = 2;
  ::ImageNormPointProto* mutable_image_norm_points(int index);
  ::google::protobuf::RepeatedPtrField< ::ImageNormPointProto >*
      mutable_image_norm_points();
  const ::ImageNormPointProto& image_norm_points(int index) const;
  ::ImageNormPointProto* add_image_norm_points();
  const ::google::protobuf::RepeatedPtrField< ::ImageNormPointProto >&
      image_norm_points() const;

  // repeated .MapPointProto map_points = 3;
  int map_points_size() const;
  void clear_map_points();
  static const int kMapPointsFieldNumber = 3;
  ::MapPointProto* mutable_map_points(int index);
  ::google::protobuf::RepeatedPtrField< ::MapPointProto >*
      mutable_map_points();
  const ::MapPointProto& map_points(int index) const;
  ::MapPointProto* add_map_points();
  const ::google::protobuf::RepeatedPtrField< ::MapPointProto >&
      map_points() const;

  // repeated .DescriptorsProto descriptors = 4;
  int descriptors_size() const;
  void clear_descriptors();
  static const int kDescriptorsFieldNumber = 4;
  ::DescriptorsProto* mutable_descriptors(int index);
  ::google::protobuf::RepeatedPtrField< ::DescriptorsProto >*
      mutable_descriptors();
  const ::DescriptorsProto& descriptors(int index) const;
  ::DescriptorsProto* add_descriptors();
  const ::google::protobuf::RepeatedPtrField< ::DescriptorsProto >&
      descriptors() const;

  // .PoseProto frame_pose = 5;
  bool has_frame_pose() const;
  void clear_frame_pose();
  static const int kFramePoseFieldNumber = 5;
  private:
  const ::PoseProto& _internal_frame_pose() const;
  public:
  const ::PoseProto& frame_pose() const;
  ::PoseProto* release_frame_pose();
  ::PoseProto* mutable_frame_pose();
  void set_allocated_frame_pose(::PoseProto* frame_pose);

  // uint64 frame_id = 6;
  void clear_frame_id();
  static const int kFrameIdFieldNumber = 6;
  ::google::protobuf::uint64 frame_id() const;
  void set_frame_id(::google::protobuf::uint64 value);

  // uint64 loop_index = 7;
  void clear_loop_index();
  static const int kLoopIndexFieldNumber = 7;
  ::google::protobuf::uint64 loop_index() const;
  void set_loop_index(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:FrameProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ImagePointProto > image_points_;
  ::google::protobuf::RepeatedPtrField< ::ImageNormPointProto > image_norm_points_;
  ::google::protobuf::RepeatedPtrField< ::MapPointProto > map_points_;
  ::google::protobuf::RepeatedPtrField< ::DescriptorsProto > descriptors_;
  ::PoseProto* frame_pose_;
  ::google::protobuf::uint64 frame_id_;
  ::google::protobuf::uint64 loop_index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_database_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MapProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MapProto) */ {
 public:
  MapProto();
  virtual ~MapProto();

  MapProto(const MapProto& from);

  inline MapProto& operator=(const MapProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MapProto(MapProto&& from) noexcept
    : MapProto() {
    *this = ::std::move(from);
  }

  inline MapProto& operator=(MapProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MapProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapProto* internal_default_instance() {
    return reinterpret_cast<const MapProto*>(
               &_MapProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(MapProto* other);
  friend void swap(MapProto& a, MapProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapProto* New() const final {
    return CreateMaybeMessage<MapProto>(NULL);
  }

  MapProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MapProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MapProto& from);
  void MergeFrom(const MapProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FrameProto frames = 1;
  int frames_size() const;
  void clear_frames();
  static const int kFramesFieldNumber = 1;
  ::FrameProto* mutable_frames(int index);
  ::google::protobuf::RepeatedPtrField< ::FrameProto >*
      mutable_frames();
  const ::FrameProto& frames(int index) const;
  ::FrameProto* add_frames();
  const ::google::protobuf::RepeatedPtrField< ::FrameProto >&
      frames() const;

  // @@protoc_insertion_point(class_scope:MapProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::FrameProto > frames_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_database_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImagePointProto

// float u = 1;
inline void ImagePointProto::clear_u() {
  u_ = 0;
}
inline float ImagePointProto::u() const {
  // @@protoc_insertion_point(field_get:ImagePointProto.u)
  return u_;
}
inline void ImagePointProto::set_u(float value) {
  
  u_ = value;
  // @@protoc_insertion_point(field_set:ImagePointProto.u)
}

// float v = 2;
inline void ImagePointProto::clear_v() {
  v_ = 0;
}
inline float ImagePointProto::v() const {
  // @@protoc_insertion_point(field_get:ImagePointProto.v)
  return v_;
}
inline void ImagePointProto::set_v(float value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:ImagePointProto.v)
}

// -------------------------------------------------------------------

// ImageNormPointProto

// float u = 1;
inline void ImageNormPointProto::clear_u() {
  u_ = 0;
}
inline float ImageNormPointProto::u() const {
  // @@protoc_insertion_point(field_get:ImageNormPointProto.u)
  return u_;
}
inline void ImageNormPointProto::set_u(float value) {
  
  u_ = value;
  // @@protoc_insertion_point(field_set:ImageNormPointProto.u)
}

// float v = 2;
inline void ImageNormPointProto::clear_v() {
  v_ = 0;
}
inline float ImageNormPointProto::v() const {
  // @@protoc_insertion_point(field_get:ImageNormPointProto.v)
  return v_;
}
inline void ImageNormPointProto::set_v(float value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:ImageNormPointProto.v)
}

// -------------------------------------------------------------------

// MapPointProto

// float x = 1;
inline void MapPointProto::clear_x() {
  x_ = 0;
}
inline float MapPointProto::x() const {
  // @@protoc_insertion_point(field_get:MapPointProto.x)
  return x_;
}
inline void MapPointProto::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:MapPointProto.x)
}

// float y = 2;
inline void MapPointProto::clear_y() {
  y_ = 0;
}
inline float MapPointProto::y() const {
  // @@protoc_insertion_point(field_get:MapPointProto.y)
  return y_;
}
inline void MapPointProto::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:MapPointProto.y)
}

// float z = 3;
inline void MapPointProto::clear_z() {
  z_ = 0;
}
inline float MapPointProto::z() const {
  // @@protoc_insertion_point(field_get:MapPointProto.z)
  return z_;
}
inline void MapPointProto::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:MapPointProto.z)
}

// -------------------------------------------------------------------

// PoseProto

// float x = 1;
inline void PoseProto::clear_x() {
  x_ = 0;
}
inline float PoseProto::x() const {
  // @@protoc_insertion_point(field_get:PoseProto.x)
  return x_;
}
inline void PoseProto::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:PoseProto.x)
}

// float y = 2;
inline void PoseProto::clear_y() {
  y_ = 0;
}
inline float PoseProto::y() const {
  // @@protoc_insertion_point(field_get:PoseProto.y)
  return y_;
}
inline void PoseProto::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:PoseProto.y)
}

// float z = 3;
inline void PoseProto::clear_z() {
  z_ = 0;
}
inline float PoseProto::z() const {
  // @@protoc_insertion_point(field_get:PoseProto.z)
  return z_;
}
inline void PoseProto::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:PoseProto.z)
}

// float q_x = 4;
inline void PoseProto::clear_q_x() {
  q_x_ = 0;
}
inline float PoseProto::q_x() const {
  // @@protoc_insertion_point(field_get:PoseProto.q_x)
  return q_x_;
}
inline void PoseProto::set_q_x(float value) {
  
  q_x_ = value;
  // @@protoc_insertion_point(field_set:PoseProto.q_x)
}

// float q_y = 5;
inline void PoseProto::clear_q_y() {
  q_y_ = 0;
}
inline float PoseProto::q_y() const {
  // @@protoc_insertion_point(field_get:PoseProto.q_y)
  return q_y_;
}
inline void PoseProto::set_q_y(float value) {
  
  q_y_ = value;
  // @@protoc_insertion_point(field_set:PoseProto.q_y)
}

// float q_z = 6;
inline void PoseProto::clear_q_z() {
  q_z_ = 0;
}
inline float PoseProto::q_z() const {
  // @@protoc_insertion_point(field_get:PoseProto.q_z)
  return q_z_;
}
inline void PoseProto::set_q_z(float value) {
  
  q_z_ = value;
  // @@protoc_insertion_point(field_set:PoseProto.q_z)
}

// float q_w = 7;
inline void PoseProto::clear_q_w() {
  q_w_ = 0;
}
inline float PoseProto::q_w() const {
  // @@protoc_insertion_point(field_get:PoseProto.q_w)
  return q_w_;
}
inline void PoseProto::set_q_w(float value) {
  
  q_w_ = value;
  // @@protoc_insertion_point(field_set:PoseProto.q_w)
}

// -------------------------------------------------------------------

// DescriptorsProto

// string bitset = 1;
inline void DescriptorsProto::clear_bitset() {
  bitset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DescriptorsProto::bitset() const {
  // @@protoc_insertion_point(field_get:DescriptorsProto.bitset)
  return bitset_.GetNoArena();
}
inline void DescriptorsProto::set_bitset(const ::std::string& value) {
  
  bitset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DescriptorsProto.bitset)
}
#if LANG_CXX11
inline void DescriptorsProto::set_bitset(::std::string&& value) {
  
  bitset_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DescriptorsProto.bitset)
}
#endif
inline void DescriptorsProto::set_bitset(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bitset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DescriptorsProto.bitset)
}
inline void DescriptorsProto::set_bitset(const char* value, size_t size) {
  
  bitset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DescriptorsProto.bitset)
}
inline ::std::string* DescriptorsProto::mutable_bitset() {
  
  // @@protoc_insertion_point(field_mutable:DescriptorsProto.bitset)
  return bitset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DescriptorsProto::release_bitset() {
  // @@protoc_insertion_point(field_release:DescriptorsProto.bitset)
  
  return bitset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DescriptorsProto::set_allocated_bitset(::std::string* bitset) {
  if (bitset != NULL) {
    
  } else {
    
  }
  bitset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bitset);
  // @@protoc_insertion_point(field_set_allocated:DescriptorsProto.bitset)
}

// -------------------------------------------------------------------

// FrameProto

// repeated .ImagePointProto image_points = 1;
inline int FrameProto::image_points_size() const {
  return image_points_.size();
}
inline void FrameProto::clear_image_points() {
  image_points_.Clear();
}
inline ::ImagePointProto* FrameProto::mutable_image_points(int index) {
  // @@protoc_insertion_point(field_mutable:FrameProto.image_points)
  return image_points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ImagePointProto >*
FrameProto::mutable_image_points() {
  // @@protoc_insertion_point(field_mutable_list:FrameProto.image_points)
  return &image_points_;
}
inline const ::ImagePointProto& FrameProto::image_points(int index) const {
  // @@protoc_insertion_point(field_get:FrameProto.image_points)
  return image_points_.Get(index);
}
inline ::ImagePointProto* FrameProto::add_image_points() {
  // @@protoc_insertion_point(field_add:FrameProto.image_points)
  return image_points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ImagePointProto >&
FrameProto::image_points() const {
  // @@protoc_insertion_point(field_list:FrameProto.image_points)
  return image_points_;
}

// repeated .ImageNormPointProto image_norm_points = 2;
inline int FrameProto::image_norm_points_size() const {
  return image_norm_points_.size();
}
inline void FrameProto::clear_image_norm_points() {
  image_norm_points_.Clear();
}
inline ::ImageNormPointProto* FrameProto::mutable_image_norm_points(int index) {
  // @@protoc_insertion_point(field_mutable:FrameProto.image_norm_points)
  return image_norm_points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ImageNormPointProto >*
FrameProto::mutable_image_norm_points() {
  // @@protoc_insertion_point(field_mutable_list:FrameProto.image_norm_points)
  return &image_norm_points_;
}
inline const ::ImageNormPointProto& FrameProto::image_norm_points(int index) const {
  // @@protoc_insertion_point(field_get:FrameProto.image_norm_points)
  return image_norm_points_.Get(index);
}
inline ::ImageNormPointProto* FrameProto::add_image_norm_points() {
  // @@protoc_insertion_point(field_add:FrameProto.image_norm_points)
  return image_norm_points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ImageNormPointProto >&
FrameProto::image_norm_points() const {
  // @@protoc_insertion_point(field_list:FrameProto.image_norm_points)
  return image_norm_points_;
}

// repeated .MapPointProto map_points = 3;
inline int FrameProto::map_points_size() const {
  return map_points_.size();
}
inline void FrameProto::clear_map_points() {
  map_points_.Clear();
}
inline ::MapPointProto* FrameProto::mutable_map_points(int index) {
  // @@protoc_insertion_point(field_mutable:FrameProto.map_points)
  return map_points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::MapPointProto >*
FrameProto::mutable_map_points() {
  // @@protoc_insertion_point(field_mutable_list:FrameProto.map_points)
  return &map_points_;
}
inline const ::MapPointProto& FrameProto::map_points(int index) const {
  // @@protoc_insertion_point(field_get:FrameProto.map_points)
  return map_points_.Get(index);
}
inline ::MapPointProto* FrameProto::add_map_points() {
  // @@protoc_insertion_point(field_add:FrameProto.map_points)
  return map_points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MapPointProto >&
FrameProto::map_points() const {
  // @@protoc_insertion_point(field_list:FrameProto.map_points)
  return map_points_;
}

// repeated .DescriptorsProto descriptors = 4;
inline int FrameProto::descriptors_size() const {
  return descriptors_.size();
}
inline void FrameProto::clear_descriptors() {
  descriptors_.Clear();
}
inline ::DescriptorsProto* FrameProto::mutable_descriptors(int index) {
  // @@protoc_insertion_point(field_mutable:FrameProto.descriptors)
  return descriptors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::DescriptorsProto >*
FrameProto::mutable_descriptors() {
  // @@protoc_insertion_point(field_mutable_list:FrameProto.descriptors)
  return &descriptors_;
}
inline const ::DescriptorsProto& FrameProto::descriptors(int index) const {
  // @@protoc_insertion_point(field_get:FrameProto.descriptors)
  return descriptors_.Get(index);
}
inline ::DescriptorsProto* FrameProto::add_descriptors() {
  // @@protoc_insertion_point(field_add:FrameProto.descriptors)
  return descriptors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DescriptorsProto >&
FrameProto::descriptors() const {
  // @@protoc_insertion_point(field_list:FrameProto.descriptors)
  return descriptors_;
}

// .PoseProto frame_pose = 5;
inline bool FrameProto::has_frame_pose() const {
  return this != internal_default_instance() && frame_pose_ != NULL;
}
inline void FrameProto::clear_frame_pose() {
  if (GetArenaNoVirtual() == NULL && frame_pose_ != NULL) {
    delete frame_pose_;
  }
  frame_pose_ = NULL;
}
inline const ::PoseProto& FrameProto::_internal_frame_pose() const {
  return *frame_pose_;
}
inline const ::PoseProto& FrameProto::frame_pose() const {
  const ::PoseProto* p = frame_pose_;
  // @@protoc_insertion_point(field_get:FrameProto.frame_pose)
  return p != NULL ? *p : *reinterpret_cast<const ::PoseProto*>(
      &::_PoseProto_default_instance_);
}
inline ::PoseProto* FrameProto::release_frame_pose() {
  // @@protoc_insertion_point(field_release:FrameProto.frame_pose)
  
  ::PoseProto* temp = frame_pose_;
  frame_pose_ = NULL;
  return temp;
}
inline ::PoseProto* FrameProto::mutable_frame_pose() {
  
  if (frame_pose_ == NULL) {
    auto* p = CreateMaybeMessage<::PoseProto>(GetArenaNoVirtual());
    frame_pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:FrameProto.frame_pose)
  return frame_pose_;
}
inline void FrameProto::set_allocated_frame_pose(::PoseProto* frame_pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete frame_pose_;
  }
  if (frame_pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      frame_pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, frame_pose, submessage_arena);
    }
    
  } else {
    
  }
  frame_pose_ = frame_pose;
  // @@protoc_insertion_point(field_set_allocated:FrameProto.frame_pose)
}

// uint64 frame_id = 6;
inline void FrameProto::clear_frame_id() {
  frame_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FrameProto::frame_id() const {
  // @@protoc_insertion_point(field_get:FrameProto.frame_id)
  return frame_id_;
}
inline void FrameProto::set_frame_id(::google::protobuf::uint64 value) {
  
  frame_id_ = value;
  // @@protoc_insertion_point(field_set:FrameProto.frame_id)
}

// uint64 loop_index = 7;
inline void FrameProto::clear_loop_index() {
  loop_index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FrameProto::loop_index() const {
  // @@protoc_insertion_point(field_get:FrameProto.loop_index)
  return loop_index_;
}
inline void FrameProto::set_loop_index(::google::protobuf::uint64 value) {
  
  loop_index_ = value;
  // @@protoc_insertion_point(field_set:FrameProto.loop_index)
}

// -------------------------------------------------------------------

// MapProto

// repeated .FrameProto frames = 1;
inline int MapProto::frames_size() const {
  return frames_.size();
}
inline void MapProto::clear_frames() {
  frames_.Clear();
}
inline ::FrameProto* MapProto::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:MapProto.frames)
  return frames_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::FrameProto >*
MapProto::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:MapProto.frames)
  return &frames_;
}
inline const ::FrameProto& MapProto::frames(int index) const {
  // @@protoc_insertion_point(field_get:MapProto.frames)
  return frames_.Get(index);
}
inline ::FrameProto* MapProto::add_frames() {
  // @@protoc_insertion_point(field_add:MapProto.frames)
  return frames_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FrameProto >&
MapProto::frames() const {
  // @@protoc_insertion_point(field_list:MapProto.frames)
  return frames_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_database_2eproto
